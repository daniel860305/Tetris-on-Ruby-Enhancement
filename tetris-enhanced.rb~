# MyPiece is a subclass of Piece that adds 2 more functionalities:
# 1. Add 4 more kinds of pieces (including one cheating pieces) to the game.
# 2. Add ability to draw cheating pieces if cheating is activated.
class MyPiece < Piece 
  All_My_Pieces = [[[[0, 0], [1, 0], [0, 1], [1, 1]]],  # square (only needs one)
                   rotations([[0, 0], [-1, 0], [1, 0], [0, -1]]), # T
                   [[[0, 0], [-1, 0], [1, 0], [2, 0]], # long (only needs two)
                    [[0, 0], [0, -1], [0, 1], [0, 2]]],
                   rotations([[0, 0], [0, -1], [0, 1], [1, 1]]), # L
                   rotations([[0, 0], [0, -1], [0, 1], [-1, 1]]), # inverted L
                   rotations([[0, 0], [-1, 0], [0, -1], [1, -1]]), # S
                   rotations([[0, 0], [1, 0], [0, -1], [-1, -1]]), # Z
                   rotations([[0,0], [0,-1], [-1,-1], [-1,0], [1,0]]), # new block 1
                   [[[0,0], [-1,0], [-2,0], [1,0], [2,0]], # long long (only needs two)
                    [[0,0], [0,-1], [0,-2], [0,1], [0,2]]],
                   rotations([[0,0], [0,-1], [1,0]])] # new block 3
  
  Cheat_Pieces = [[[0,0]]] # cheat block
  def initialize (point_array, board)
    super(point_array, board)
    @size = point_array[0].size
  end

  # get how many blocks the piece has
  def size
    @size
  end  
  # class method to choose the next piece based on cheating or not
  def self.next_piece (board, cheat)
    if cheat
      MyPiece.new(Cheat_Pieces, board)
    else
      MyPiece.new(All_My_Pieces.sample, board)
    end
  end
end

# MyBoard is a subclass of Board that adds 2 more functionalities:
# 1.Add ability to turn the pieces "upside down" if the user press "u" on the keyboard.
# 2.Add game logic to determine if the user is able to cheat. (score >= 100)
class MyBoard < Board 
  def initialize (game)
    @grid = Array.new(num_rows) {Array.new(num_columns)}
    @current_block = MyPiece.next_piece(self, false)
    @score = 0
    @game = game
    @delay = 500
    @cheat = false
  end
  
  # rotates the current piece clockwise
  def rotate_upsidedown
    if !game_over? and @game.is_running?
      @current_block.move(0, 0, 2)
    end
    draw
  end

  def cheat
    @cheat
  end

  # cheat: alter the next piece if score is greater than 100
  def cheat_game
    if !cheat and score >= 100
      @cheat = true
      @score -= 100
    end
  end
  
  # gets the next piece
  def next_piece
    @current_block = MyPiece.next_piece(self, cheat)
    @current_pos = nil
    @cheat = false
  end

  # gets the information from the current piece about where it is and uses this
  # to store the piece on the board itself.  Then calls remove_filled.
  def store_current
    size = @current_block.size-1
    locations = @current_block.current_rotation
    displacement = @current_block.position
    (0..size).each{|index| 
      current = locations[index];
      @grid[current[1]+displacement[1]][current[0]+displacement[0]] = 
      @current_pos[index]
    }
    remove_filled
    @delay = [@delay - 2, 80].max
  end
end

# MyTetris is a subclass of Tetris that basically adds 2 more key_bindings.
class MyTetris < Tetris
  # your enhancements here
  def set_board
    @canvas = TetrisCanvas.new
    @board = MyBoard.new(self)
    @canvas.place(@board.block_size * @board.num_rows + 3,
                  @board.block_size * @board.num_columns + 6, 24, 80)
    @board.draw
  end

  def key_bindings  
    super
    @root.bind('u', proc {@board.rotate_upsidedown})
    @root.bind('c', proc {@board.cheat_game})
  end
end


